syntax = "proto3";

package core;

option go_package = "./core";

// PaxosKV defines the RPC functions related to two-phase paxos.
//
// A Proposer sends all its fields in a Prepare request, with `Val` being left a nil.
// A Proposer sends all its fields in an Accept request, with `Val` being filled with the value it chose.
//
// An Acceptor responds all its fields in a Prepare reply.
// An Acceptor responds all `LastBal` field in a Accept reply.
//
// Thus we use the struct of a Proposer as request struct.
// And the struct of an Acceptor as reply struct.
service PaxosKV {
    rpc Prepare (Proposer) returns (Acceptor) {}
    rpc Accept (Proposer) returns (Acceptor) {}
}

// BallotNum is the ballot number in paxos. It consists of a monotonically
// incremental number and a university unique ProposerId.
message BallotNum {
    int64 N = 1;
    int64 ProposerId = 2;
}

// Value is the value part of a key-value record.
message Value {
    int64 Vi64 = 1;
}

// PaxosInstanceId specifies which paxos instance it runs on.
// A paxos instance is used to determine a specific version of a record.
message PaxosInstanceId {
    // the key of the record to operate on.
    string Key = 1;
    // the version of the record to modify.
    int64  Ver = 2;
}

// Acceptor is the state of an Acceptor and also serves as the reply
// of Prepare/Accept.
message Acceptor {
    // the last ballot number the instance knows of.
    BallotNum lastBal = 1;
    // the voted value by this Acceptor.
    Value val = 2;
    // the ballot number the Acceptor voted it.
    BallotNum VBal = 3;
}

// Proposer is the state of a Proposer and also serves as the request
// of Prepare/Accept.
message Proposer {
    // which paxos instance it runs on.
    PaxosInstanceId Id = 1;
    // the ballot number of a Proposer.
    BallotNum Bal = 2;
    // the value of a Proposer has chosen.
    Value Val = 3;
}